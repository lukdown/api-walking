<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="yds">

	<!-- 전체 리스트 불러오기 -->
	<select id="selectList" resultType="YdsVo">
	<![CDATA[
        select gl.gallery_no,
			   gl.users_no,
		       gl.course_no,
		       gl.gallery_introduce,
		       ul.users_nickname,
		       ul.users_saveName,
		       ch.challenge_name,
		       ch.saveName,
		       re.record_date,
		       cl.course_no,
		       cl.course_name,
		       cl.course_region,
		       cl.course_length,
		       cl.course_time,
		       cl.course_difficulty,
		       COALESCE(like_counts.like_count, 0) AS gallery_likeCount  -- 좋아요 수를 포함
		from gallery_list gl
		left join users_list ul on gl.users_no = ul.users_no
		left join (select record_date, course_no from record) re on re.course_no = gl.course_no
		left join (select course_no, course_name, course_region, course_length, course_time, course_difficulty from course_list) cl on cl.course_no = gl.course_no
		left join (select cp.users_no, ch.challenge_name, ch.saveName FROM challenge_person cp 
     				left join challenge ch ON cp.challenge_no = ch.challenge_no
     				where cp.challenge_daepyo = 1) ch ON ch.users_no = gl.users_no
     	left join (select gallery_no, COUNT(*) AS like_count FROM gallery_like 
        			GROUP BY gallery_no
    				) like_counts ON like_counts.gallery_no = gl.gallery_no
    	
    	group by gl.gallery_no
    	order by gl.gallery_no desc
	]]>

	</select>
	
	<!-- 코스별 리스트 조회 -->
	<select id="selectCourseList" resultType="YdsVo">
	<![CDATA[
		SELECT gl.gallery_no,
		       gl.users_no,
		       gl.course_no,
		       gl.gallery_introduce,
		       ul.users_nickname,
		       ul.users_saveName,
		       ch.challenge_name,
		       ch.saveName,
		       re.record_date,
		       cl.course_no,
		       cl.course_name,
		       cl.course_region,
		       cl.course_length,
		       cl.course_time,
		       cl.course_difficulty,
		       gp.gallery_filePath,
		       gp.gallery_orgName,
		       gp.gallery_saveName,
		       gp.gallery_fileSize,
               COALESCE(like_counts.like_count, 0) AS gallery_likeCount -- 좋아요 수를 포함
	FROM gallery_list gl
		LEFT JOIN users_list ul ON gl.users_no = ul.users_no
		LEFT JOIN (
		    SELECT record_date, course_no 
		    FROM record
		) re ON re.course_no = gl.course_no
		LEFT JOIN (
		    SELECT course_no, course_name, course_region, course_length, course_time, course_difficulty 
		    FROM course_list
		) cl ON cl.course_no = gl.course_no
		LEFT JOIN (
		    SELECT cp.users_no, ch.challenge_name, ch.saveName 
		    FROM challenge_person cp 
		    LEFT JOIN challenge ch ON cp.challenge_no = ch.challenge_no
		) ch ON ch.users_no = gl.users_no
		LEFT JOIN (
		    SELECT gallery_no, COUNT(*) AS like_count 
		    FROM gallery_like 
		    GROUP BY gallery_no
		) like_counts ON like_counts.gallery_no = gl.gallery_no
		LEFT JOIN gallery_photo gp ON gp.gallery_no = gl.gallery_no
	WHERE gl.course_no = #{courseNo} -- 특정 코스를 기준으로 필터링
	GROUP BY gl.gallery_no
	order by gl.gallery_no desc  -- 최신 항목이 상단에 오도록 정렬
	]]>

	</select>
	
	<!-- 유저별 갤러리 리스트 조회 -->
	<select id="selectMyCourseList" resultType="YdsVo">
	<![CDATA[
		SELECT gl.gallery_no,
		       gl.users_no,
		       gl.course_no,
		       gl.gallery_introduce,
		       ul.users_nickname,
		       ul.users_saveName,
		       ch.challenge_name,
		       ch.saveName,
		       re.record_date,
		       cl.course_no,
		       cl.course_name,
		       cl.course_region,
		       cl.course_length,
		       cl.course_time,
		       cl.course_difficulty,
		       COALESCE(like_counts.like_count, 0) AS gallery_likeCount -- 좋아요 수를 포함
		FROM gallery_list gl
		LEFT JOIN users_list ul ON gl.users_no = ul.users_no
		LEFT JOIN (
		    SELECT record_date, course_no 
		    FROM record
		) re ON re.course_no = gl.course_no
		LEFT JOIN (
		    SELECT course_no, course_name, course_region, course_length, course_time, course_difficulty 
		    FROM course_list
		) cl ON cl.course_no = gl.course_no
		LEFT JOIN (
		    SELECT cp.users_no, ch.challenge_name, ch.saveName 
		    FROM challenge_person cp 
		    LEFT JOIN challenge ch ON cp.challenge_no = ch.challenge_no
		) ch ON ch.users_no = gl.users_no
		LEFT JOIN (
		    SELECT gallery_no, COUNT(*) AS like_count 
		    FROM gallery_like 
		    GROUP BY gallery_no
		) like_counts ON like_counts.gallery_no = gl.gallery_no
		WHERE gl.users_no = #{usersNo} -- 특정 유저를 기준으로 필터링
		GROUP BY gl.gallery_no
		order by gl.gallery_no desc  -- 최신 항목이 상단에 오도록 정렬
		]]>

		</select>
		
	<!-- 나의 갤러리 포스팅 삭제 시리즈-->
	<delete id="deleteLike" parameterType="int">
		<![CDATA[
			DELETE FROM gallery_like WHERE gallery_no = #{galleryNo};	
		]]>
	</delete>
	<delete id="deletePhoto" parameterType="int">
		<![CDATA[
			DELETE FROM gallery_photo WHERE gallery_no = #{galleryNo};	
		]]>
	</delete>
	<delete id="deleteGallery" parameterType="int">
		<![CDATA[
			DELETE FROM gallery_list WHERE gallery_no = #{galleryNo};	
		]]>
	</delete>
		

	<!-- 특정 회원의 코스 목록 조회 -->
	<select id="selectCoursesByUserNo" parameterType="int" resultType="YdsVo">
        <![CDATA[
	        SELECT 	course_no,
	 				users_no, 
	 				course_name, 
	 				course_difficulty, 
					course_length, 
					course_time, 
					course_hit, 
					course_region, 
					course_date, 
					course_open, 
					course_introduce
					        
			FROM course_list 
			
        ]]>
	</select>
	
	<!-- 특정리스트 좋아요 조회 -->
	<select id="selectGalleryLikes" parameterType="int" resultType="int">
        <![CDATA[
	        SELECT COUNT(*) 
        	
        	FROM gallery_like 
        	WHERE gallery_no = #{galleryNo}
        ]]>	
    </select>
    
     <!-- 특정 사용자가 해당 갤러리에 좋아요를 눌렀는지 확인 -->
    <select id="checkLikeExists" parameterType="map" resultType="int">
        <![CDATA[
        SELECT COUNT(*) 
        
        FROM gallery_like 
        WHERE users_no = #{userNo} and gallery_no = #{galleryNo}
    	]]>
    </select>
    
    <!-- 좋아요 등록 -->
   <insert id="glikeinsert" parameterType="map">
      <![CDATA[   
          insert into gallery_like
              values ( null, #{userNo}, #{galleryNo} )
       ]]>
   </insert>
   
   <!-- 좋아요 삭제 -->
	<delete id="glikedelete" parameterType="map">
		<![CDATA[
			delete from gallery_like
			where users_no = #{userNo} and gallery_no = #{galleryNo}
		]]>
	</delete>
	

	<!-- 로그인한 회원의 특정 코스 소개 등록(저장) -->

	<insert id="insertCourseIntroduction" parameterType="YdsVo">
	    <![CDATA[
	        INSERT INTO gallery_list (gallery_no, users_no, course_no, gallery_introduce)
	        VALUES (null, #{users_no}, #{course_no}, #{gallery_introduce})
	    ]]>
	    <selectKey keyProperty="gallery_no" resultType="int" order="AFTER">
         <![CDATA[
            select last_insert_id()
         ]]>
      	</selectKey>
	</insert>
	
	
	<!-- 파일 정보를 저장하는 쿼리문 -->
	
	<insert id="saveFileInfo" parameterType="YdsAttachVo">
		<![CDATA[
		    
		    INSERT into gallery_photo (gallery_no, gallery_filePath, gallery_orgName, gallery_saveName, gallery_fileSize)
		    VALUES (#{gallery_no}, #{gallery_filePath}, #{gallery_orgName}, #{gallery_saveName}, #{gallery_fileSize})
		    
	    ]]>
	</insert>
	
	<!-- 이미지 리스트 불러오기 -->
	
	<select id="selectPicList" parameterType="map" resultType="YdsAttachVo">
		<![CDATA[
        
			SELECT 	gal.gallery_no,
       				gp.gallery_filePath,
       				gp.gallery_orgName,
			       	gp.gallery_saveName,
			       	gp.gallery_fileSize
			FROM gallery_list gal
			JOIN gallery_photo gp ON gal.gallery_no = gp.gallery_no
			WHERE gal.gallery_no = #{galleryNo}
		]]>	

    </select>
    
    <!-- 최신 포스팅의 gallery_no 가져오기 -->
	<select id="selectLatestGalleryNo" parameterType="int" resultType="YdsVo">
		<![CDATA[
		
	    select  gallery_no, 
			    gallery_filePath, 
			    gallery_orgName, 
			    gallery_saveName, 
			    gallery_fileSize
		from gallery_photo
		where gallery_no = #{gallery_no}
		
	    ]]>
	</select>
    
	
	

	<!-- 선택한 코스의 상세 정보 조회 -->

	<select id="selectCourseDetailsByName" parameterType="String" resultType="YdsVo">
        <![CDATA[
	        SELECT 	course_no,
	 				users_no, 
	 				course_name, 
	 				course_difficulty, 
					course_length, 
					course_time, 
					course_hit, 
					course_region, 
					course_date, 
					course_open, 
					course_introduce
			FROM course_list 
			WHERE course_name = #{courseName}
        ]]>
	</select>

	
	

</mapper>